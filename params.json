{
  "name": "Inheritance in Javascript",
  "tagline": "This blog discusses Inheritance in Javascript.",
  "body": "#Inheritance in JavaScript\r\n\r\n**Inheritance** is a very important **OOPS** concept, by virtue of which children **classes** **inherit** from their parent **classes**. But now, question is how to implement **inheritance** in **JavaScript**?\r\n\r\nWe all know how to make **class** in **JavaScript**? **Class** in **JavaScript** is nothing but a **[constructor function](http://codechutney.in/blog/javascript/constructor-pattern/)**. Here is a sample class:\r\n\r\n```JavaScript\r\nfunction Peacock() {\r\n    this.dance = function() {\r\n      console.log(\"I am Peacock! I can dance\");\r\n    };\r\n}\r\n```\r\n\r\nIn **JavaScript**, we do not have any **extend** keyword, the only way to implement **inheritance** is through **prototype chaining**.\r\n\r\nSo, what is **prototype chaining**?\r\n\r\nEach object in **JavaScript** has internal link to another object, through a property known as **[Prototype](http://codechutney.in/blog/javascript/prototype-in-javascript/)**. While moving through the chain of these **objects**, one would encounter 'null' in the **prototype** which would mean that Object **prototype** has reached.\r\n\r\nWhen a property requested in one object is not found in that **object**, then **prototype** of that **object** is looked into. **Prototype** contains the reference to the next **object** in the chain. **Prototype chaining** is used to look into the next **object** in the chain and so on.....until the end of chain is reached. This behavior of **Prototype Chaining** helps us to add **inheritance** in **JavaScript**.\r\n\r\nLet's experience some inheritance using the given sample classes:\r\n\r\n**LivingThing Class**\r\n\r\n```JavaScript\r\nfunction LivingThing() {\r\n    this.move = function() {\r\n        console.log(\"I am living thing! I can move!!\");\r\n    };\r\n}\r\n```\r\n\r\n**Bird Class**\r\n\r\n```JavaScript\r\nfunction Bird() {\r\n    this.fly = function() {\r\n        console.log(\"I am bird! I can fly!!\");\r\n    };\r\n}\r\n```\r\n\r\n**Peacock Class**\r\n\r\n```JavaScript\r\nfunction Peacock() {\r\n    this.dance = function() {\r\n      console.log(\"I am Peacock! I can dance\");\r\n    };\r\n}\r\n```\r\n\r\nNow, we know that Peacock is a bird and bird is a living thing. So all we need to show here is their relationship i.e. we need to implement the **inheritance**. Here we go:\r\n\r\n```JavaScript\r\nBird.prototype = new LivingThing();\r\nBird.prototype.constructor = Bird;\r\n```\r\n\r\nIn the above two lines of code we have passed the instance of LivingThing to the **prototype** of Bird, therefore we have linked Bird to LivingThing. Second line though does not makes any difference to the **inheritance** but it is in important in the sense that it makes the constructor property of **prototype** refer to the correct class/function.\r\n\r\nNow, let's link Peacock to the Bird class. This can be done in the following way:\r\n\r\n```JavaScript\r\nPeacock.prototype = new Bird();\r\nPeacock.prototype.constructor = Peacock;\r\n```\r\n\r\nIn the above snippet we have linked Peacock to Bird. This type of **chaining** can go on and on. The above set of snippets would lead us to hierarchy given below:\r\n\r\n> LivingThing --> Bird --> Peacock\r\n\r\nLets try to create an object of Peacock **class**, and call dance, fly and move **methods/functions** on that object, and see what is happening??\r\n\r\n```JavaScript\r\nvar peacock = new Peacock();\r\npeacock.dance(); // I am Peacock! I can dance\r\npeacock.fly(); // I am bird! I can fly!!\r\npeacock.move(); // I am living thing! I can move!!\r\n```\r\n\r\nYou can see, we can call the parent methods/function on child object/peacock. Let's see the above snippet in more detail:\r\n\r\nWe called ```dance()``` on Peacock **object**, since ```dance()``` belonged to Peacock, so it could be easily accessed. ```fly()``` belonged to Bird, but it could still be called on Peacock reason being that ```fly()``` was first searched in Peacock, on not finding ```fly()``` in Peacock, **prototype** was looked into to access the next **object** in the chain, which is Bird and hence we were able to call ```fly()```. Similar thing happened when ```move()``` was called, first Peacock object was searched, then hunt moved to the  **prototype** of Peacock in order to know the next object in the chain. Bird object was then looked into and on not finding ```move()``` there, reference of next **object** in **prototype** of Bird was looked which led the search to LivingThing **object**, which actually had the ```move()```. This is how we made a hierarchy starting from LivingThing to Peacock!\r\n\r\nWe are a little unfortunate that we don't have the **extend** keyword in **JavaScript** as available in **Java**, but we aren't that **unlucky** as we have **[prototype](http://namitamalik.github.io/Prototype-in-JavaScript/)** to our rescue!\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}